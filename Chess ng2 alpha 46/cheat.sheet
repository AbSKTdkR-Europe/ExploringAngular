
npm install -g tsd@^0.6.0
tsd install angular2 es6-promise rx rx-lite
    puts the current Angular2 type definitions into the subfolder called "typing" of the current FormBuilder



Compilation:
- built-in with Visual Studio Code
- built-in with Atom
- Run TypeScript compiler in watch mode:
  tsc --watch -m commonjs -t es5 --emitDecoratorMetadata --experimentalDecorators app.ts
  tsc --watch -m commonjs -t es5 --emitDecoratorMetadata --experimentalDecorators *.ts
  Note that tsc doesn't recognize files that have been added after starting. It needs to
  be stopped with CTRL+C and restarted.

Debugging:
- Configure the tsconfig.json so that sourcemaps are added automatically.
- delete the *.ts file from manually from Google Chrome's cache: http://stackoverflow.com/questions/18658185/why-chrome-doesnt-update-typescript-source-files-on-change
- alternatively start the program in incognito mode

Start server:
  Navigate to the folder containing the index.html and type:
  http-server
  To quit the server hit CTRL+C.

5 Minutes Quickstart:
  https://angular.io/docs/js/latest/quickstart.html

tsconfig.json explained:
  https://github.com/TypeStrong/atom-typescript/blob/master/docs/tsconfig.md
  http://blog.icanmakethiswork.io/2015/02/hey-tsconfigjson-where-have-you-been.html
  example tsconfig.json:
  {
      "compilerOptions": {
          "emitDecoratorMetadata": true,
          "experimentalDecorators": true,
          "module": "amd",
          "target": "es5",
          "sourceMap": true
      },
      "files": [
          "app.ts",
          "board.ts",
          "typings/tsd.d.ts"
      ],
          "filesGlob": [
              "*.ts",
              "engine/*.ts"
      ]
  }




Angular 2 in Visual Studio Code (as of April):
  http://blogs.msdn.com/b/typescript/archive/2015/04/30/using-typescript-in-visual-studio-code.aspx

AngularJS in Visual Studio Code (as of Mai):
  http://blogs.msdn.com/b/vscode/archive/2015/05/22/getting-started-with-angular-and-visual-studio-code.aspx

Test-URL:
  http://127.0.0.1:8080/

EmberJS vs. Backbone.js vs. Angular:
  http://www.quora.com/How-do-AngularJs-2-0-and-EmberJs-1-10-0-compare
  https://www.airpair.com/js/javascript-framework-comparison

Atom:
  install package atomatigit for full GIT support (open the panel by hitting cmd-alt-g)
  install atom-typescript
  install atom-beautify (optional) ALT+CMD+L
  configure the autocomplete plugin to be less nervous
  http://blog.dripstat.com/state-of-typescript-1-6-support/

Error messages:
  "The selector "chessboard" did not match any elements" means that the HTML file doesn't contain a widget corresponding to the
  component passed to the bootstrap method

Dependency Injection:
  * Option 1: Inject another component. Simply add the component to the constructors parameter list. Caveat: you can't inject a parent component to a child component. Works only with siblings.
  * Option 2: Inject a service. Mark the service class with @Injectable(),
      add the service implementation class to the app's list of component bindings,
      and add the service to the parameter list of the component that needs the service.

TypeScript modules:
  http://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript&referringTitle=TypeScript%20Documentation

TypeScript:
  Never forget to add "this." to refer to instance methods and variables
  interesting / intuitive approach to getters and setters

Everything is a tree!
  * You always have to define the component you want to use as child components in the parent component. Otherwise,
    they simply won't be rendered. More precisely, their source code or pseudo tag will be rendered.

Links:
  http://www.angular2.com/
  https://github.com/stephanrauh/ExploringAngular
  http://victorsavkin.com/post/126514197956/dependency-injection-in-angular-1-and-angular-2
